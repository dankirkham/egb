use bytes::{Buf, BytesMut};

use crate::dasm::Instruction;
use crate::symbols::Symbols;

pub struct Decoder<'a> {
    bytes: BytesMut,
    addr: u32,
    symbols: Option<&'a Symbols>,
}

impl<'a> Decoder<'a> {
    pub fn from_bytes(bytes: BytesMut, symbols: Option<&'a Symbols>) -> Self {
        Self {
            bytes,
            addr: 0,
            symbols,
        }
    }
}

macro_rules! i1 {
    ($self:ident, $str:literal) => {{
        let symbol = if let Some(symbols) = $self.symbols {
            symbols.get_symbol($self.addr as u16)
        } else {
            None
        };
        let instr = Instruction::new($self.addr as u16, $str.to_owned(), symbol);
        Some((instr, 1))
    }};
}
macro_rules! i2 {
    ($self:ident, $str:literal) => {{
        if $self.bytes.len() < 2 {
            return None;
        }

        let symbol = if let Some(symbols) = $self.symbols {
            symbols.get_symbol($self.addr as u16)
        } else {
            None
        };
        let n = u8::from($self.bytes[1]);
        let instr = Instruction::new($self.addr as u16, format!($str, n), symbol);
        Some((instr, 2))
    }};
}
macro_rules! i3 {
    ($self:ident, $str:literal) => {{
        if $self.bytes.len() < 3 {
            return None;
        }

        let symbol = if let Some(symbols) = $self.symbols {
            symbols.get_symbol($self.addr as u16)
        } else {
            None
        };
        let mut addr_bytes = [0; 2];
        addr_bytes.copy_from_slice(&$self.bytes[1..3]);
        let n = u16::from_le_bytes(addr_bytes);
        let instr = Instruction::new($self.addr as u16, format!($str, n), symbol);
        Some((instr, 3))
    }};
}

impl<'a> Iterator for Decoder<'a> {
    type Item = (u16, Instruction);

    fn next(&mut self) -> Option<Self::Item> {
        if self.bytes.is_empty() {
            return None;
        }

        let result = match self.bytes[0] {
            0x06 => i2!(self, "ld b,0x{:02x}"),
            0x0e => i2!(self, "ld c,0x{:02x}"),
            0x16 => i2!(self, "ld d,0x{:02x}"),
            0x1e => i2!(self, "ld e,0x{:02x}"),
            0x26 => i2!(self, "ld h,0x{:02x}"),
            0x2e => i2!(self, "ld l,0x{:02x}"),
            0x7f => i1!(self, "ld a,a"),
            0x78 => i1!(self, "ld a,b"),
            0x79 => i1!(self, "ld a,c"),
            0x7a => i1!(self, "ld a,d"),
            0x7b => i1!(self, "ld a,e"),
            0x7c => i1!(self, "ld a,h"),
            0x7d => i1!(self, "ld a,l"),
            0x7e => i1!(self, "ld a,(hl)"),
            0x40 => i1!(self, "ld b,b"),
            0x41 => i1!(self, "ld b,c"),
            0x42 => i1!(self, "ld b,d"),
            0x43 => i1!(self, "ld b,e"),
            0x44 => i1!(self, "ld b,h"),
            0x45 => i1!(self, "ld b,l"),
            0x46 => i1!(self, "ld b,(hl)"),
            0x48 => i1!(self, "ld c,b"),
            0x49 => i1!(self, "ld c,c"),
            0x4a => i1!(self, "ld c,d"),
            0x4b => i1!(self, "ld c,e"),
            0x4c => i1!(self, "ld c,h"),
            0x4d => i1!(self, "ld c,l"),
            0x4e => i1!(self, "ld c,(hl)"),
            0x50 => i1!(self, "ld d,b"),
            0x51 => i1!(self, "ld d,c"),
            0x52 => i1!(self, "ld d,d"),
            0x53 => i1!(self, "ld d,e"),
            0x54 => i1!(self, "ld d,h"),
            0x55 => i1!(self, "ld d,l"),
            0x56 => i1!(self, "ld d,(hl)"),
            0x58 => i1!(self, "ld e,b"),
            0x59 => i1!(self, "ld e,c"),
            0x5a => i1!(self, "ld e,d"),
            0x5b => i1!(self, "ld e,e"),
            0x5c => i1!(self, "ld e,h"),
            0x5d => i1!(self, "ld e,l"),
            0x5e => i1!(self, "ld e,(hl)"),
            0x60 => i1!(self, "ld h,b"),
            0x61 => i1!(self, "ld h,c"),
            0x62 => i1!(self, "ld h,d"),
            0x63 => i1!(self, "ld h,e"),
            0x64 => i1!(self, "ld h,h"),
            0x65 => i1!(self, "ld h,l"),
            0x66 => i1!(self, "ld h,(hl)"),
            0x68 => i1!(self, "ld l,b"),
            0x69 => i1!(self, "ld l,c"),
            0x6a => i1!(self, "ld l,d"),
            0x6b => i1!(self, "ld l,e"),
            0x6c => i1!(self, "ld l,h"),
            0x6d => i1!(self, "ld l,l"),
            0x6e => i1!(self, "ld l,(hl)"),
            0x70 => i1!(self, "ld (hl),b"),
            0x71 => i1!(self, "ld (hl),c"),
            0x72 => i1!(self, "ld (hl),d"),
            0x73 => i1!(self, "ld (hl),e"),
            0x74 => i1!(self, "ld (hl),h"),
            0x75 => i1!(self, "ld (hl),l"),
            0x36 => i2!(self, "ld (hl),0x{:02x}"),
            0x0a => i1!(self, "ld a,(bc)"),
            0x1a => i1!(self, "ld a,(de)"),
            0xfa => i3!(self, "ld a,(0x{:04x})"),
            0x3e => i2!(self, "ld a,0x{:02x}"),
            0x47 => i1!(self, "ld b,a"),
            0x4f => i1!(self, "ld c,a"),
            0x57 => i1!(self, "ld d,a"),
            0x5f => i1!(self, "ld e,a"),
            0x67 => i1!(self, "ld h,a"),
            0x6f => i1!(self, "ld l,a"),
            0x02 => i1!(self, "ld (bc),a"),
            0x12 => i1!(self, "ld (de),a"),
            0x77 => i1!(self, "ld (hl),a"),
            0xea => i3!(self, "ld (0x{:04x}),a"),
            0xf2 => i1!(self, "ld a,(0xff00 + c)"),
            0xe2 => i1!(self, "ld (0xff00 + c),a"),
            0x3a => i1!(self, "ld a,(hl-)"),
            0x32 => i1!(self, "ld (hl-),a"),
            0x2a => i1!(self, "ld a,(hl+)"),
            0x22 => i1!(self, "ld (hl+),a"),
            0xe0 => i2!(self, "ld (0xff00 + 0x{:02x}),a"),
            0xf0 => i2!(self, "ld a,(0xff00 + 0x{:02x})"),
            0x01 => i3!(self, "ld BC,0x{:04x}"),
            0x11 => i3!(self, "ld DE,0x{:04x}"),
            0x21 => i3!(self, "ld HL,0x{:04x}"),
            0x31 => i3!(self, "ld SP,0x{:04x}"),
            0xf9 => i1!(self, "ld SP,HL"),
            0xf8 => i2!(self, "ld SP,SP + 0x{:02x}"),
            0x08 => i3!(self, "ld 0x{:04x},SP"),
            0xf5 => i1!(self, "push af"),
            0xc5 => i1!(self, "push bc"),
            0xd5 => i1!(self, "push de"),
            0xe5 => i1!(self, "push hl"),
            0xf1 => i1!(self, "pop af"),
            0xc1 => i1!(self, "pop bc"),
            0xd1 => i1!(self, "pop de"),
            0xe1 => i1!(self, "pop hl"),
            0x87 => i1!(self, "add a,a"),
            0x80 => i1!(self, "add a,b"),
            0x81 => i1!(self, "add a,c"),
            0x82 => i1!(self, "add a,d"),
            0x83 => i1!(self, "add a,e"),
            0x84 => i1!(self, "add a,h"),
            0x85 => i1!(self, "add a,l"),
            0x86 => i1!(self, "add a,(hl)"),
            0xc6 => i2!(self, "add a,0x{:02x}"),
            0x8f => i1!(self, "adc a,a"),
            0x88 => i1!(self, "adc a,b"),
            0x89 => i1!(self, "adc a,c"),
            0x8a => i1!(self, "adc a,d"),
            0x8b => i1!(self, "adc a,e"),
            0x8c => i1!(self, "adc a,h"),
            0x8d => i1!(self, "adc a,l"),
            0x8e => i1!(self, "adc a,(hl)"),
            0xce => i2!(self, "adc a,0x{:02x}"),
            0x97 => i1!(self, "sub a,a"),
            0x90 => i1!(self, "sub a,b"),
            0x91 => i1!(self, "sub a,c"),
            0x92 => i1!(self, "sub a,d"),
            0x93 => i1!(self, "sub a,e"),
            0x94 => i1!(self, "sub a,h"),
            0x95 => i1!(self, "sub a,l"),
            0x96 => i1!(self, "sub a,(hl)"),
            0xd6 => i2!(self, "sub a,0x{:02x}"),
            0x9f => i1!(self, "sbc a,a"),
            0x98 => i1!(self, "sbc a,b"),
            0x99 => i1!(self, "sbc a,c"),
            0x9a => i1!(self, "sbc a,d"),
            0x9b => i1!(self, "sbc a,e"),
            0x9c => i1!(self, "sbc a,h"),
            0x9d => i1!(self, "sbc a,l"),
            0x9e => i1!(self, "sbc a,(hl)"),
            0xde => i2!(self, "sbc a,0x{:02x}"),
            0xa7 => i1!(self, "and a,a"),
            0xa0 => i1!(self, "and a,b"),
            0xa1 => i1!(self, "and a,c"),
            0xa2 => i1!(self, "and a,d"),
            0xa3 => i1!(self, "and a,e"),
            0xa4 => i1!(self, "and a,h"),
            0xa5 => i1!(self, "and a,l"),
            0xa6 => i1!(self, "and a,(hl)"),
            0xe6 => i2!(self, "and a,0x{:02x}"),
            0xb7 => i1!(self, "or a,a"),
            0xb0 => i1!(self, "or a,b"),
            0xb1 => i1!(self, "or a,c"),
            0xb2 => i1!(self, "or a,d"),
            0xb3 => i1!(self, "or a,e"),
            0xb4 => i1!(self, "or a,h"),
            0xb5 => i1!(self, "or a,l"),
            0xb6 => i1!(self, "or a,(hl)"),
            0xf6 => i2!(self, "or a,0x{:02x}"),
            0xaf => i1!(self, "xor a,a"),
            0xa8 => i1!(self, "xor a,b"),
            0xa9 => i1!(self, "xor a,c"),
            0xaa => i1!(self, "xor a,d"),
            0xab => i1!(self, "xor a,e"),
            0xac => i1!(self, "xor a,h"),
            0xad => i1!(self, "xor a,l"),
            0xae => i1!(self, "xor a,(hl)"),
            0xee => i2!(self, "xor a,0x{:02x}"),
            0xbf => i1!(self, "cp a,a"),
            0xb8 => i1!(self, "cp a,b"),
            0xb9 => i1!(self, "cp a,c"),
            0xba => i1!(self, "cp a,d"),
            0xbb => i1!(self, "cp a,e"),
            0xbc => i1!(self, "cp a,h"),
            0xbd => i1!(self, "cp a,l"),
            0xbe => i1!(self, "cp a,(hl)"),
            0xfe => i2!(self, "cp a,0x{:02x}"),
            0x3c => i1!(self, "inc a"),
            0x04 => i1!(self, "inc b"),
            0x0c => i1!(self, "inc c"),
            0x14 => i1!(self, "inc d"),
            0x1c => i1!(self, "inc e"),
            0x24 => i1!(self, "inc h"),
            0x2c => i1!(self, "inc l"),
            0x34 => i1!(self, "inc (hl)"),
            0x3d => i1!(self, "dec a"),
            0x05 => i1!(self, "dec b"),
            0x0d => i1!(self, "dec c"),
            0x15 => i1!(self, "dec d"),
            0x1d => i1!(self, "dec e"),
            0x25 => i1!(self, "dec h"),
            0x2d => i1!(self, "dec l"),
            0x35 => i1!(self, "dec (hl)"),
            0x09 => i1!(self, "add hl,bc"),
            0x19 => i1!(self, "add hl,de"),
            0x29 => i1!(self, "add hl,hl"),
            0x39 => i1!(self, "add hl,sp"),
            0xe8 => i2!(self, "add sp,0x{:02x}"),
            0x03 => i1!(self, "inc bc"),
            0x13 => i1!(self, "inc de"),
            0x23 => i1!(self, "inc hl"),
            0x33 => i1!(self, "inc sp"),
            0x0b => i1!(self, "dec bc"),
            0x1b => i1!(self, "dec de"),
            0x2b => i1!(self, "dec hl"),
            0x3b => i1!(self, "dec sp"),
            0x27 => i1!(self, "daa a"),
            0x2f => i1!(self, "cpl a"),
            0x3f => i1!(self, "ccf a"),
            0x37 => i1!(self, "scf"),
            0x00 => i1!(self, "nop"),
            0x76 => i1!(self, "halt"),
            0x10 => i1!(self, "stop"),
            0xf3 => i1!(self, "di"),
            0xfb => i1!(self, "ei"),
            0x07 => i1!(self, "rlca"),
            0x17 => i1!(self, "rla"),
            0x0f => i1!(self, "rrca"),
            0x1f => i1!(self, "rra"),
            0xc3 => i3!(self, "jp 0x{:04x}"),
            0xc2 => i3!(self, "jp NZ,0x{:04x}"),
            0xca => i3!(self, "jp Z,0x{:04x}"),
            0xd2 => i3!(self, "jp NC,0x{:04x}"),
            0xda => i3!(self, "jp C,0x{:04x}"),
            0xe9 => i1!(self, "jp (hl)"),
            0x18 => i2!(self, "jr 0x{:02x}"),
            0x20 => i2!(self, "jr NZ,0x{:02x}"),
            0x28 => i2!(self, "jr Z,0x{:02x}"),
            0x30 => i2!(self, "jr NC,0x{:02x}"),
            0x38 => i2!(self, "jr C,0x{:02x}"),
            0xcd => i3!(self, "call 0x{:04x}"),
            0xc4 => i3!(self, "call NZ,0x{:04x}"),
            0xcc => i3!(self, "call Z,0x{:04x}"),
            0xd4 => i3!(self, "call NC,0x{:04x}"),
            0xdc => i3!(self, "call C,0x{:04x}"),
            0xc7 => i1!(self, "rst 0x00"),
            0xcf => i1!(self, "rst 0x08"),
            0xd7 => i1!(self, "rst 0x10"),
            0xdf => i1!(self, "rst 0x18"),
            0xe7 => i1!(self, "rst 0x20"),
            0xef => i1!(self, "rst 0x28"),
            0xf7 => i1!(self, "rst 0x30"),
            0xff => i1!(self, "rst 0x38"),
            0xc9 => i1!(self, "ret"),
            0xc0 => i1!(self, "ret NZ"),
            0xc8 => i1!(self, "ret Z"),
            0xd0 => i1!(self, "ret NC"),
            0xd8 => i1!(self, "ret C"),
            0xd9 => i1!(self, "reti"),

            0xcb => {
                self.bytes.advance(1);
                let result = match self.bytes[0] {
                    0x37 => i1!(self, "swap a"),
                    0x30 => i1!(self, "swap b"),
                    0x31 => i1!(self, "swap c"),
                    0x32 => i1!(self, "swap d"),
                    0x33 => i1!(self, "swap e"),
                    0x34 => i1!(self, "swap h"),
                    0x35 => i1!(self, "swap l"),
                    0x36 => i1!(self, "swap (hl)"),
                    0x07 => i1!(self, "rlc a"),
                    0x00 => i1!(self, "rlc b"),
                    0x01 => i1!(self, "rlc c"),
                    0x02 => i1!(self, "rlc d"),
                    0x03 => i1!(self, "rlc e"),
                    0x04 => i1!(self, "rlc h"),
                    0x05 => i1!(self, "rlc l"),
                    0x06 => i1!(self, "rlc (hl)"),
                    0x17 => i1!(self, "rl a"),
                    0x10 => i1!(self, "rl b"),
                    0x11 => i1!(self, "rl c"),
                    0x12 => i1!(self, "rl d"),
                    0x13 => i1!(self, "rl e"),
                    0x14 => i1!(self, "rl h"),
                    0x15 => i1!(self, "rl l"),
                    0x16 => i1!(self, "rl (hl)"),
                    0x0f => i1!(self, "rrc a"),
                    0x08 => i1!(self, "rrc b"),
                    0x09 => i1!(self, "rrc c"),
                    0x0a => i1!(self, "rrc d"),
                    0x0b => i1!(self, "rrc e"),
                    0x0c => i1!(self, "rrc h"),
                    0x0d => i1!(self, "rrc l"),
                    0x0e => i1!(self, "rrc (hl)"),
                    0x1f => i1!(self, "rr a"),
                    0x18 => i1!(self, "rr b"),
                    0x19 => i1!(self, "rr c"),
                    0x1a => i1!(self, "rr d"),
                    0x1b => i1!(self, "rr e"),
                    0x1c => i1!(self, "rr h"),
                    0x1d => i1!(self, "rr l"),
                    0x1e => i1!(self, "rr (hl)"),
                    0x27 => i1!(self, "sla a"),
                    0x20 => i1!(self, "sla b"),
                    0x21 => i1!(self, "sla c"),
                    0x22 => i1!(self, "sla d"),
                    0x23 => i1!(self, "sla e"),
                    0x24 => i1!(self, "sla h"),
                    0x25 => i1!(self, "sla l"),
                    0x26 => i1!(self, "sla (hl)"),
                    0x2f => i1!(self, "sra a"),
                    0x28 => i1!(self, "sra b"),
                    0x29 => i1!(self, "sra c"),
                    0x2a => i1!(self, "sra d"),
                    0x2b => i1!(self, "sra e"),
                    0x2c => i1!(self, "sra h"),
                    0x2d => i1!(self, "sra l"),
                    0x2e => i1!(self, "sra (hl)"),
                    0x3f => i1!(self, "srl a"),
                    0x38 => i1!(self, "srl b"),
                    0x39 => i1!(self, "srl c"),
                    0x3a => i1!(self, "srl d"),
                    0x3b => i1!(self, "srl e"),
                    0x3c => i1!(self, "srl h"),
                    0x3d => i1!(self, "srl l"),
                    0x3e => i1!(self, "srl (hl)"),
                    0x47 => i1!(self, "bit 0,a"),
                    0x40 => i1!(self, "bit 0,b"),
                    0x41 => i1!(self, "bit 0,c"),
                    0x42 => i1!(self, "bit 0,d"),
                    0x43 => i1!(self, "bit 0,e"),
                    0x44 => i1!(self, "bit 0,h"),
                    0x45 => i1!(self, "bit 0,l"),
                    0x46 => i1!(self, "bit 0,hl"),
                    0x4f => i1!(self, "bit 1,a"),
                    0x48 => i1!(self, "bit 1,b"),
                    0x49 => i1!(self, "bit 1,c"),
                    0x4a => i1!(self, "bit 1,d"),
                    0x4b => i1!(self, "bit 1,e"),
                    0x4c => i1!(self, "bit 1,h"),
                    0x4d => i1!(self, "bit 1,l"),
                    0x4e => i1!(self, "bit 1,hl"),
                    0x57 => i1!(self, "bit 2,a"),
                    0x50 => i1!(self, "bit 2,b"),
                    0x51 => i1!(self, "bit 2,c"),
                    0x52 => i1!(self, "bit 2,d"),
                    0x53 => i1!(self, "bit 2,e"),
                    0x54 => i1!(self, "bit 2,h"),
                    0x55 => i1!(self, "bit 2,l"),
                    0x56 => i1!(self, "bit 2,hl"),
                    0x5f => i1!(self, "bit 3,a"),
                    0x58 => i1!(self, "bit 3,b"),
                    0x59 => i1!(self, "bit 3,c"),
                    0x5a => i1!(self, "bit 3,d"),
                    0x5b => i1!(self, "bit 3,e"),
                    0x5c => i1!(self, "bit 3,h"),
                    0x5d => i1!(self, "bit 3,l"),
                    0x5e => i1!(self, "bit 4,hl"),
                    0x67 => i1!(self, "bit 4,a"),
                    0x60 => i1!(self, "bit 4,b"),
                    0x61 => i1!(self, "bit 4,c"),
                    0x62 => i1!(self, "bit 4,d"),
                    0x63 => i1!(self, "bit 4,e"),
                    0x64 => i1!(self, "bit 4,h"),
                    0x65 => i1!(self, "bit 4,l"),
                    0x66 => i1!(self, "bit 4,hl"),
                    0x6f => i1!(self, "bit 5,a"),
                    0x68 => i1!(self, "bit 5,b"),
                    0x69 => i1!(self, "bit 5,c"),
                    0x6a => i1!(self, "bit 5,d"),
                    0x6b => i1!(self, "bit 5,e"),
                    0x6c => i1!(self, "bit 5,h"),
                    0x6d => i1!(self, "bit 5,l"),
                    0x6e => i1!(self, "bit 5,hl"),
                    0x77 => i1!(self, "bit 6,a"),
                    0x70 => i1!(self, "bit 6,b"),
                    0x71 => i1!(self, "bit 6,c"),
                    0x72 => i1!(self, "bit 6,d"),
                    0x73 => i1!(self, "bit 6,e"),
                    0x74 => i1!(self, "bit 6,h"),
                    0x75 => i1!(self, "bit 6,l"),
                    0x76 => i1!(self, "bit 6,hl"),
                    0x7f => i1!(self, "bit 7,a"),
                    0x78 => i1!(self, "bit 7,b"),
                    0x79 => i1!(self, "bit 7,c"),
                    0x7a => i1!(self, "bit 7,d"),
                    0x7b => i1!(self, "bit 7,e"),
                    0x7c => i1!(self, "bit 7,h"),
                    0x7d => i1!(self, "bit 7,l"),
                    0x7e => i1!(self, "bit 7,hl"),
                    0xc7 => i1!(self, "set 0,a"),
                    0xc0 => i1!(self, "set 0,b"),
                    0xc1 => i1!(self, "set 0,c"),
                    0xc2 => i1!(self, "set 0,d"),
                    0xc3 => i1!(self, "set 0,e"),
                    0xc4 => i1!(self, "set 0,h"),
                    0xc5 => i1!(self, "set 0,l"),
                    0xc6 => i1!(self, "set 0,hl"),
                    0xcf => i1!(self, "set 1,a"),
                    0xc8 => i1!(self, "set 1,b"),
                    0xc9 => i1!(self, "set 1,c"),
                    0xca => i1!(self, "set 1,d"),
                    0xcb => i1!(self, "set 1,e"),
                    0xcc => i1!(self, "set 1,h"),
                    0xcd => i1!(self, "set 1,l"),
                    0xce => i1!(self, "set 1,hl"),
                    0xd7 => i1!(self, "set 2,a"),
                    0xd0 => i1!(self, "set 2,b"),
                    0xd1 => i1!(self, "set 2,c"),
                    0xd2 => i1!(self, "set 2,d"),
                    0xd3 => i1!(self, "set 2,e"),
                    0xd4 => i1!(self, "set 2,h"),
                    0xd5 => i1!(self, "set 2,l"),
                    0xd6 => i1!(self, "set 2,hl"),
                    0xdf => i1!(self, "set 3,a"),
                    0xd8 => i1!(self, "set 3,b"),
                    0xd9 => i1!(self, "set 3,c"),
                    0xda => i1!(self, "set 3,d"),
                    0xdb => i1!(self, "set 3,e"),
                    0xdc => i1!(self, "set 3,h"),
                    0xdd => i1!(self, "set 3,l"),
                    0xde => i1!(self, "set 4,hl"),
                    0xe7 => i1!(self, "set 4,a"),
                    0xe0 => i1!(self, "set 4,b"),
                    0xe1 => i1!(self, "set 4,c"),
                    0xe2 => i1!(self, "set 4,d"),
                    0xe3 => i1!(self, "set 4,e"),
                    0xe4 => i1!(self, "set 4,h"),
                    0xe5 => i1!(self, "set 4,l"),
                    0xe6 => i1!(self, "set 4,hl"),
                    0xef => i1!(self, "set 5,a"),
                    0xe8 => i1!(self, "set 5,b"),
                    0xe9 => i1!(self, "set 5,c"),
                    0xea => i1!(self, "set 5,d"),
                    0xeb => i1!(self, "set 5,e"),
                    0xec => i1!(self, "set 5,h"),
                    0xed => i1!(self, "set 5,l"),
                    0xee => i1!(self, "set 5,hl"),
                    0xf7 => i1!(self, "set 6,a"),
                    0xf0 => i1!(self, "set 6,b"),
                    0xf1 => i1!(self, "set 6,c"),
                    0xf2 => i1!(self, "set 6,d"),
                    0xf3 => i1!(self, "set 6,e"),
                    0xf4 => i1!(self, "set 6,h"),
                    0xf5 => i1!(self, "set 6,l"),
                    0xf6 => i1!(self, "set 6,hl"),
                    0xff => i1!(self, "set 7,a"),
                    0xf8 => i1!(self, "set 7,b"),
                    0xf9 => i1!(self, "set 7,c"),
                    0xfa => i1!(self, "set 7,d"),
                    0xfb => i1!(self, "set 7,e"),
                    0xfc => i1!(self, "set 7,h"),
                    0xfd => i1!(self, "set 7,l"),
                    0xfe => i1!(self, "set 7,hl"),
                    0x87 => i1!(self, "res 0,a"),
                    0x80 => i1!(self, "res 0,b"),
                    0x81 => i1!(self, "res 0,c"),
                    0x82 => i1!(self, "res 0,d"),
                    0x83 => i1!(self, "res 0,e"),
                    0x84 => i1!(self, "res 0,h"),
                    0x85 => i1!(self, "res 0,l"),
                    0x86 => i1!(self, "res 0,hl"),
                    0x8f => i1!(self, "res 1,a"),
                    0x88 => i1!(self, "res 1,b"),
                    0x89 => i1!(self, "res 1,c"),
                    0x8a => i1!(self, "res 1,d"),
                    0x8b => i1!(self, "res 1,e"),
                    0x8c => i1!(self, "res 1,h"),
                    0x8d => i1!(self, "res 1,l"),
                    0x8e => i1!(self, "res 1,hl"),
                    0x97 => i1!(self, "res 2,a"),
                    0x90 => i1!(self, "res 2,b"),
                    0x91 => i1!(self, "res 2,c"),
                    0x92 => i1!(self, "res 2,d"),
                    0x93 => i1!(self, "res 2,e"),
                    0x94 => i1!(self, "res 2,h"),
                    0x95 => i1!(self, "res 2,l"),
                    0x96 => i1!(self, "res 2,hl"),
                    0x9f => i1!(self, "res 3,a"),
                    0x98 => i1!(self, "res 3,b"),
                    0x99 => i1!(self, "res 3,c"),
                    0x9a => i1!(self, "res 3,d"),
                    0x9b => i1!(self, "res 3,e"),
                    0x9c => i1!(self, "res 3,h"),
                    0x9d => i1!(self, "res 3,l"),
                    0x9e => i1!(self, "res 4,hl"),
                    0xa7 => i1!(self, "res 4,a"),
                    0xa0 => i1!(self, "res 4,b"),
                    0xa1 => i1!(self, "res 4,c"),
                    0xa2 => i1!(self, "res 4,d"),
                    0xa3 => i1!(self, "res 4,e"),
                    0xa4 => i1!(self, "res 4,h"),
                    0xa5 => i1!(self, "res 4,l"),
                    0xa6 => i1!(self, "res 4,hl"),
                    0xaf => i1!(self, "res 5,a"),
                    0xa8 => i1!(self, "res 5,b"),
                    0xa9 => i1!(self, "res 5,c"),
                    0xaa => i1!(self, "res 5,d"),
                    0xab => i1!(self, "res 5,e"),
                    0xac => i1!(self, "res 5,h"),
                    0xad => i1!(self, "res 5,l"),
                    0xae => i1!(self, "res 5,hl"),
                    0xb7 => i1!(self, "res 6,a"),
                    0xb0 => i1!(self, "res 6,b"),
                    0xb1 => i1!(self, "res 6,c"),
                    0xb2 => i1!(self, "res 6,d"),
                    0xb3 => i1!(self, "res 6,e"),
                    0xb4 => i1!(self, "res 6,h"),
                    0xb5 => i1!(self, "res 6,l"),
                    0xb6 => i1!(self, "res 6,hl"),
                    0xbf => i1!(self, "res 7,a"),
                    0xb8 => i1!(self, "res 7,b"),
                    0xb9 => i1!(self, "res 7,c"),
                    0xba => i1!(self, "res 7,d"),
                    0xbb => i1!(self, "res 7,e"),
                    0xbc => i1!(self, "res 7,h"),
                    0xbd => i1!(self, "res 7,l"),
                    0xbe => i1!(self, "res 7,hl"),
                };

                if let Some((instr, len)) = result {
                    let addr = self.addr;
                    self.addr += len + 1_u32;
                    self.bytes.advance(len as usize);

                    return Some((addr as u16, instr));
                }
                return None;
            }

            0xd3 => i1!(self, "undefined (0xd3)"),
            0xdb => i1!(self, "undefined (0xdb)"),
            0xdd => i1!(self, "undefined (0xdd)"),
            0xe3 => i1!(self, "undefined (0xe3)"),
            0xe4 => i1!(self, "undefined (0xe4)"),
            0xeb => i1!(self, "undefined (0xeb)"),
            0xec => i1!(self, "undefined (0xec)"),
            0xed => i1!(self, "undefined (0xed)"),
            0xf4 => i1!(self, "undefined (0xf4)"),
            0xfc => i1!(self, "undefined (0xfc)"),
            0xfd => i1!(self, "undefined (0xfd)"),
        };

        if let Some((instr, len)) = result {
            let addr = self.addr;
            self.addr += len as u32;
            self.bytes.advance(len as usize);

            Some((addr as u16, instr))
        } else {
            None
        }
    }
}
